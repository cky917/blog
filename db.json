{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"themes/mabao-theme/source/js/menu.js","path":"js/menu.js","modified":0},{"_id":"themes/mabao-theme/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0},{"_id":"themes/mabao-theme/source/js/index.js","path":"js/index.js","modified":0},{"_id":"themes/mabao-theme/source/img/mogu.png","path":"img/mogu.png","modified":0},{"_id":"themes/mabao-theme/source/img/logo.svg","path":"img/logo.svg","modified":0},{"_id":"themes/mabao-theme/source/img/logo.png","path":"img/logo.png","modified":0},{"_id":"themes/mabao-theme/source/img/img-bg.jpg","path":"img/img-bg.jpg","modified":0},{"_id":"themes/mabao-theme/source/img/icons-demo-nav.svg","path":"img/icons-demo-nav.svg","modified":0},{"_id":"themes/mabao-theme/source/img/icons-demo-nav.png","path":"img/icons-demo-nav.png","modified":0},{"_id":"themes/mabao-theme/source/fonts/icons.woff","path":"fonts/icons.woff","modified":0},{"_id":"themes/mabao-theme/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":0},{"_id":"themes/mabao-theme/source/fonts/icons.svg","path":"fonts/icons.svg","modified":0},{"_id":"themes/mabao-theme/source/fonts/icons.eot","path":"fonts/icons.eot","modified":0},{"_id":"themes/mabao-theme/source/favicon.ico","path":"favicon.ico","modified":0},{"_id":"themes/mabao-theme/source/css/style.css","path":"css/style.css","modified":0},{"_id":"themes/mabao-theme/source/css/screen.css","path":"css/screen.css","modified":0},{"_id":"themes/mabao-theme/source/css/normalize.css","path":"css/normalize.css","modified":0}],"Cache":[{"_id":"source/CNAME","shasum":"341a1bd24be6da36f01d2e5438abcb47b7b7d5b5","modified":1447251446634},{"_id":"source/_posts/JavaScript实践.md","shasum":"cc1626a570a75f10bb1a7495f59d62eac11e4016","modified":1447251446634},{"_id":"source/_posts/不是只有“if else”.md","shasum":"79fe30980151f160ac025cac8ea77f9567eda600","modified":1447251446635},{"_id":"source/_posts/前端知识收集.md","shasum":"69ad110eae3962d0fefd5671e3f43a1307c5bdc8","modified":1447251446635},{"_id":"source/_posts/各种居中布局的css实现方法.md","shasum":"ef0a61f71d79b6cbea77854785874e9972a1e962","modified":1447251446636},{"_id":"source/_posts/好玩的cookie.md","shasum":"16d1df46c116cf10c04e885da69efa2bfcc078b5","modified":1447251446636},{"_id":"source/_posts/学习日报 2015-09-08.md","shasum":"eaa13594baccf5adeb567374bc787785f1859e0f","modified":1447251446636},{"_id":"source/_posts/学习日报 2015-09-09.md","shasum":"2fbd4f5b308af6c229548c235121f80ab81b016c","modified":1447251446637},{"_id":"source/_posts/学习日报 2015-09-10.md","shasum":"770651e92f750f5183a6fabff03be7097c82ca4d","modified":1447251446637},{"_id":"source/_posts/学习日报 2015-09-11.md","shasum":"97570fcc20a94730942d4ce5c5ed79659c094d8f","modified":1447251446637},{"_id":"source/_posts/学习日报 2015-09-15.md","shasum":"99d4fcfddb6b581bcb9e4d84a75f59dad2ebb134","modified":1447251446638},{"_id":"source/_posts/学习日报 2015-09-16——2015-09-22.md","shasum":"07de90353b2f1cd88b2335e1dacae5a598ebd7bc","modified":1447251446638},{"_id":"source/_posts/学习日报2015-09-23——2015-09-25.md","shasum":"09f2cca5b9779e0a68b356aebd89c62fbd7bca3f","modified":1447251446638},{"_id":"source/_posts/浏览器的重绘与重排.md","shasum":"24d649937bc23a1c1defe03c27c0dd5eb5649669","modified":1447251446639},{"_id":"source/_posts/用js原生实现Ajax的get和post.md","shasum":"f1e92c1a0cda68e3ee67ef4a9fe74e6a921c4aed","modified":1447251446639},{"_id":"source/_posts/请问您今天要来点兔子吗.md","shasum":"3cff53b878fc22d5218baf55ee672db4739081d6","modified":1447251446639},{"_id":"source/_posts/请问，你也是一只蘑菇吗.md","shasum":"a80dc6edd33fcaf7016e6cb8b6234663a1534628","modified":1447251446640},{"_id":"source/about-me/index.md","shasum":"0ed2842cf5439c2f27f4798a3ed2447cd4512eff","modified":1447251446641},{"_id":"themes/mabao-theme/LICENSE","shasum":"bd19923410e7f582ade9def0118a910d4d53a696","modified":1447251446642},{"_id":"themes/mabao-theme/README.md","shasum":"b429d5668b3fe10c4af37ccc070ea87cbc53a3f4","modified":1447251446642},{"_id":"themes/mabao-theme/_config.yml","shasum":"77e9af000d8e896ad3664556790ba12a85b38e90","modified":1447251446643},{"_id":"themes/mabao-theme/layout/_widget/archive.ejs","shasum":"2f48941c453b8d061d39233706b3c62bea912c2c","modified":1447251446644},{"_id":"themes/mabao-theme/layout/_widget/category.ejs","shasum":"48db9568717bb620de791bd74befe913854d7849","modified":1447251446644},{"_id":"themes/mabao-theme/layout/_widget/recent_posts.ejs","shasum":"3257bfe1c3ebe7d63437ea5d069d2c83a5379ad3","modified":1447251446645},{"_id":"themes/mabao-theme/layout/_widget/tag.ejs","shasum":"e6df099e2556edf4f3cd8be8a35cb649d2b1686a","modified":1447251446645},{"_id":"themes/mabao-theme/layout/_widget/tagcloud.ejs","shasum":"3351e14e53ab36953ba1cc3d85859941387ac734","modified":1447251446645},{"_id":"themes/mabao-theme/layout/archive.ejs","shasum":"1704d02907207de6d4b6207bd9debf926740d82d","modified":1447251446646},{"_id":"themes/mabao-theme/layout/casper/after_all.ejs","shasum":"f823e66a4e45feafa8126797880141fb576e96a2","modified":1447251446646},{"_id":"themes/mabao-theme/layout/casper/footer.ejs","shasum":"5b908921f5ee9e82a057ae1218a82bdcebe85fd1","modified":1447251446647},{"_id":"themes/mabao-theme/layout/casper/head.ejs","shasum":"a27c431c195206efd1d705f68c2888249373394f","modified":1447251446647},{"_id":"themes/mabao-theme/layout/casper/header.ejs","shasum":"92cf7805e8a344875138c182a2125e0554becc0a","modified":1447251446647},{"_id":"themes/mabao-theme/layout/casper/index.ejs","shasum":"7e17010206d3eb4d54060da656dd24fadc7041f9","modified":1447251446648},{"_id":"themes/mabao-theme/layout/casper/post/author.ejs","shasum":"c0094f46608102d3627ec1887906133ef5559a75","modified":1447251446649},{"_id":"themes/mabao-theme/layout/casper/post/comments.ejs","shasum":"c7d67cbfa73b4cdeeaa3f008e2ca378f02b38b16","modified":1447251446649},{"_id":"themes/mabao-theme/layout/casper/post/meta.ejs","shasum":"bb1ad0d2c78f3882c4cf68dafb3d24ba779bf8b6","modified":1447251446650},{"_id":"themes/mabao-theme/layout/casper/post/navigation.ejs","shasum":"ba135f3602af2f6f0c4dfdc47a14493a7041bbc0","modified":1447251446650},{"_id":"themes/mabao-theme/layout/casper/post/share.ejs","shasum":"6f6a4d2df6961dfec3a3ac29033d16533c17c373","modified":1447251446650},{"_id":"themes/mabao-theme/layout/casper/post.ejs","shasum":"bea98a462eb5ba31b0fdb07e5d30f9fb12e97961","modified":1447251446648},{"_id":"themes/mabao-theme/layout/casper/sidebar.ejs","shasum":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1447251446651},{"_id":"themes/mabao-theme/layout/category.ejs","shasum":"1704d02907207de6d4b6207bd9debf926740d82d","modified":1447251446651},{"_id":"themes/mabao-theme/layout/index.ejs","shasum":"13fd753d2b2e82ada96902b13a3e0b6dbafcd3c5","modified":1447251446651},{"_id":"themes/mabao-theme/layout/layout.ejs","shasum":"719a1067d4bb208764431b8672c78e97629fc2f1","modified":1447251446651},{"_id":"themes/mabao-theme/layout/page.ejs","shasum":"12b1d7c22468b220bb8c2c53f75081f9a5443e0c","modified":1447251446652},{"_id":"themes/mabao-theme/layout/post.ejs","shasum":"12b1d7c22468b220bb8c2c53f75081f9a5443e0c","modified":1447251446652},{"_id":"themes/mabao-theme/layout/tag.ejs","shasum":"8abfd6cc58a403da7fcb38431d986cb8cc543401","modified":1447251446653},{"_id":"themes/mabao-theme/source/css/normalize.css","shasum":"c2da50e7ef0a8c3a9c9b2cb25d4a3e546fd65d39","modified":1447251446653},{"_id":"themes/mabao-theme/source/css/screen.css","shasum":"33e17c7559221a7efe87e821595d190bee01319b","modified":1447251446654},{"_id":"themes/mabao-theme/source/css/style.css","shasum":"8a54815dde8fb47ec1db6256cb3a0a462848cbd2","modified":1447251446654},{"_id":"themes/mabao-theme/source/favicon.ico","shasum":"b5e3d38751ecdf6b22037db5224e43e9186d78de","modified":1447251446655},{"_id":"themes/mabao-theme/source/fonts/icons.eot","shasum":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1447251446656},{"_id":"themes/mabao-theme/source/fonts/icons.ttf","shasum":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1447251446658},{"_id":"themes/mabao-theme/source/fonts/icons.woff","shasum":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1447251446659},{"_id":"themes/mabao-theme/source/img/icons-demo-nav.png","shasum":"4508247661f7883fed94386acf61f9b05e324dce","modified":1447251446660},{"_id":"themes/mabao-theme/source/img/img-bg.jpg","shasum":"4cf609b11d89b38d2a641a8810dcf6a2bf78a716","modified":1447251446667},{"_id":"themes/mabao-theme/source/img/logo.png","shasum":"158c1cc2dc9d72b5782078d4114adb30649eb9d0","modified":1447251446668},{"_id":"themes/mabao-theme/source/img/logo.svg","shasum":"0d1fecda8d43df31367e254f43fc53f53093f4c8","modified":1447251446672},{"_id":"themes/mabao-theme/source/img/mogu.png","shasum":"74606326921ad39398269cd98f6bd9cba471af8f","modified":1447251446672},{"_id":"themes/mabao-theme/source/js/index.js","shasum":"b8171a0313c2b65d55a8a710d3ae2996fe67e915","modified":1447251446673},{"_id":"themes/mabao-theme/source/js/jquery.fitvids.js","shasum":"0bee3d274aff5ecbbe1700cde4486254a44e30a5","modified":1447251446673},{"_id":"themes/mabao-theme/source/js/menu.js","shasum":"c429f19136ebb7e7fe76001f6589bc5d16d39c1d","modified":1447251446674},{"_id":"themes/mabao-theme/source/fonts/icons.svg","shasum":"12bf62bc3a7ba0fa5315a72fbf0bb9b99766a60c","modified":1447251446657},{"_id":"themes/mabao-theme/theme-p1.png","shasum":"9711fd87f5f814527de230c2f1a51d0fe635d4ce","modified":1447251446678},{"_id":"themes/mabao-theme/source/img/icons-demo-nav.svg","shasum":"5b6fef00f9386c436238b45b9990d6c87d6a0924","modified":1447251446666},{"_id":"themes/mabao-theme/theme.gif","shasum":"14df48dfcda94912b8e0d0dd046410d8a30dc51c","modified":1447251446688},{"_id":"public/CNAME","modified":1447251458906,"shasum":"341a1bd24be6da36f01d2e5438abcb47b7b7d5b5"},{"_id":"public/js/menu.js","modified":1447251458912,"shasum":"c429f19136ebb7e7fe76001f6589bc5d16d39c1d"},{"_id":"public/js/jquery.fitvids.js","modified":1447251458915,"shasum":"0d9ee59f102516b1a988490f27ed37440713cc8b"},{"_id":"public/js/index.js","modified":1447251458917,"shasum":"a04c311b0818023c97446c79a8facdef067a04d1"},{"_id":"public/img/mogu.png","modified":1447251458920,"shasum":"74606326921ad39398269cd98f6bd9cba471af8f"},{"_id":"public/img/logo.svg","modified":1447251458924,"shasum":"0d1fecda8d43df31367e254f43fc53f53093f4c8"},{"_id":"public/img/logo.png","modified":1447251458930,"shasum":"158c1cc2dc9d72b5782078d4114adb30649eb9d0"},{"_id":"public/img/img-bg.jpg","modified":1447251458933,"shasum":"4cf609b11d89b38d2a641a8810dcf6a2bf78a716"},{"_id":"public/img/icons-demo-nav.svg","modified":1447251458941,"shasum":"5b6fef00f9386c436238b45b9990d6c87d6a0924"},{"_id":"public/img/icons-demo-nav.png","modified":1447251458947,"shasum":"4508247661f7883fed94386acf61f9b05e324dce"},{"_id":"public/fonts/icons.woff","modified":1447251458957,"shasum":"af538de6ac19d5da1cada203c7451ce32f5daceb"},{"_id":"public/fonts/icons.ttf","modified":1447251458961,"shasum":"2169592997f694ffa05b1d4c23d5a1abf35d3203"},{"_id":"public/fonts/icons.svg","modified":1447251458967,"shasum":"12bf62bc3a7ba0fa5315a72fbf0bb9b99766a60c"},{"_id":"public/fonts/icons.eot","modified":1447251458971,"shasum":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1"},{"_id":"public/favicon.ico","modified":1447251458976,"shasum":"b5e3d38751ecdf6b22037db5224e43e9186d78de"},{"_id":"public/css/style.css","modified":1447251458979,"shasum":"301626732ba3a7239916b6158934735fb4361503"},{"_id":"public/css/screen.css","modified":1447251458982,"shasum":"71c2bea76d50bcf0be6f1c1108f977916f102741"},{"_id":"public/css/normalize.css","modified":1447251458986,"shasum":"2d45c1546b603f967845038c6e34ccf8b6a986b8"},{"_id":"public/about-me/index.html","modified":1447251459014,"shasum":"6fa231aa4f414f8c3514a2532722ae5a17103a63"},{"_id":"public/2015/11/11/请问，你也是一只蘑菇吗/index.html","modified":1447251459024,"shasum":"d1434045fe30ae87517ea4826baf3bcfa2bf0199"},{"_id":"public/2015/11/11/浏览器的重绘与重排/index.html","modified":1447251459034,"shasum":"313a925ce37a23e05c171540327dae3ae68cc710"},{"_id":"public/2015/11/11/请问您今天要来点兔子吗/index.html","modified":1447251459043,"shasum":"b32bc59a365dd706666478640b4646f94d9fff0e"},{"_id":"public/2015/11/11/学习日报2015-09-23——2015-09-25/index.html","modified":1447251459058,"shasum":"b85146ff6f0c28cbcadabfd2baeda6a2a9669d6b"},{"_id":"public/2015/11/11/学习日报 2015-09-16——2015-09-22/index.html","modified":1447251459068,"shasum":"1c08ec31fd9c372317ed0355b8dbebb733aea255"},{"_id":"public/2015/11/11/各种居中布局的css实现方法/index.html","modified":1447251459077,"shasum":"175372146a7d2af8a7d736f96cd4b3a173b46f22"},{"_id":"public/2015/11/11/不是只有“if else”/index.html","modified":1447251459086,"shasum":"dbbd661214d50c889668e382e07d98005204ae96"},{"_id":"public/2015/11/11/前端知识收集/index.html","modified":1447251459096,"shasum":"acfec632eb9c482d91541247660712f7e12b9d66"},{"_id":"public/2015/11/11/JavaScript实践/index.html","modified":1447251459104,"shasum":"b817eeb569e37526020496fc7c87be6845d335e6"},{"_id":"public/2015/09/14/学习日报 2015-09-15/index.html","modified":1447251459114,"shasum":"35c2a41e653535f2e0fc62e9e22c539aca378ed3"},{"_id":"public/2015/09/11/学习日报 2015-09-11/index.html","modified":1447251459124,"shasum":"802a9709338c1c591cd09e91c7be36953f5d43d9"},{"_id":"public/2015/09/10/学习日报 2015-09-10/index.html","modified":1447251459133,"shasum":"4a38d0c53dc1795174bd9c989b1c65e1981b42dc"},{"_id":"public/2015/09/09/学习日报 2015-09-09/index.html","modified":1447251459141,"shasum":"92c2e6575c1d0368402703248db5c58fc9817ec7"},{"_id":"public/2015/09/08/学习日报 2015-09-08/index.html","modified":1447251459149,"shasum":"aab3abf83a1c5f8028c68db9377d11aacbdd6905"},{"_id":"public/2015/08/18/用js原生实现Ajax的get和post/index.html","modified":1447251459158,"shasum":"69200add5c14935457b00b8f3f71ec4b4033c66f"},{"_id":"public/2015/07/25/好玩的cookie/index.html","modified":1447251459167,"shasum":"0053b548ef10d3a7de092ad82636f33de87ab24b"},{"_id":"public/archives/index.html","modified":1447251459185,"shasum":"8c5f190d3f87bc30996b85560b1a4c96cc01c428"},{"_id":"public/archives/page/2/index.html","modified":1447251459196,"shasum":"53adbbf30516dfd0750fc12d4e91ed822acc0abf"},{"_id":"public/archives/2015/index.html","modified":1447251459210,"shasum":"c16ba2907dc0bc74a5964ef76a2f9a26ab026086"},{"_id":"public/archives/2015/page/2/index.html","modified":1447251459222,"shasum":"b8107a87c94e921973de26f04a115dcaa214f866"},{"_id":"public/archives/2015/07/index.html","modified":1447251459231,"shasum":"2a6b1481c782a28f203e9da28e65a07eb3c6d153"},{"_id":"public/archives/2015/08/index.html","modified":1447251459240,"shasum":"2ffecc433751c8febdd3109bdba31ffa1e8c6bcd"},{"_id":"public/archives/2015/09/index.html","modified":1447251459250,"shasum":"80280cb68ebddc87f81b80b0b1018dd70f2bdec6"},{"_id":"public/archives/2015/11/index.html","modified":1447251459261,"shasum":"fa4b9141fdc77befbdafdb61201b27457fd0498e"},{"_id":"public/index.html","modified":1447251459273,"shasum":"cfb0c98fe7557cf3155d31e79d774cb835cc1852"},{"_id":"public/page/2/index.html","modified":1447251459280,"shasum":"5cb4ec38dfa83991cb1a71f7e74002a0a221ddbf"},{"_id":"public/tags/矫情不是病/index.html","modified":1447251459288,"shasum":"e8e2f91a754c725e82c26d36f151f8217b6680dd"},{"_id":"public/tags/二次元/index.html","modified":1447251459297,"shasum":"4bc786db183fd22da6696155a068a3e7f0d0cb46"},{"_id":"public/tags/Javascript学习笔记/index.html","modified":1447251459307,"shasum":"18fa9b5134e35b11c67819c7d7cbcf22ce182610"},{"_id":"public/tags/web前端知识/index.html","modified":1447251459316,"shasum":"0c0bd2779e207245682adbe57616cedaef02df9b"},{"_id":"public/tags/学习日报/index.html","modified":1447251459327,"shasum":"05dc1d7274b541ff4067310449bd2dc21ea09729"},{"_id":"public/tags/css学习心得/index.html","modified":1447251459335,"shasum":"40ceb5f533f9a5c994eb28abc6c51cc9dfc1b4fe"}],"Category":[],"Data":[],"Page":[{"title":"关于我","_content":"![照骗](https://avatars2.githubusercontent.com/u/12221080?v=3&s=230)\n    \n\n陈柯伊 93年的重庆妹子 2016年大学毕业\n喜欢互联网 喜欢前端\n用了一个大学的时间完成了从2b文青到（伪）技术宅（女）的转变\n现于重庆猪八戒网络有限公司实习\n\n业余爱好：动漫 LOL  \n微博：@陈柯伊伊伊伊_\n邮箱：chen_keyi@foxmail.com","source":"about-me/index.md","raw":"title: 关于我\n---\n![照骗](https://avatars2.githubusercontent.com/u/12221080?v=3&s=230)\n    \n\n陈柯伊 93年的重庆妹子 2016年大学毕业\n喜欢互联网 喜欢前端\n用了一个大学的时间完成了从2b文青到（伪）技术宅（女）的转变\n现于重庆猪八戒网络有限公司实习\n\n业余爱好：动漫 LOL  \n微博：@陈柯伊伊伊伊_\n邮箱：chen_keyi@foxmail.com","date":"2015-11-11T14:17:26.641Z","updated":"2015-11-11T14:17:26.641Z","path":"about-me/index.html","comments":1,"layout":"page","_id":"ciguw5fgr0000u4rk3hlbsb4d"}],"Post":[{"title":"请问，你也是一只蘑菇吗","_content":"\n我博客名字的来源。\n<!--more-->\n\n以前听过一个冷笑话\n>在一家精神病医院里，有个新来的大夫，收治了一个病人。那个病人很奇怪，既不疯疯癫癫打人，也不大呼小叫吵吵嚷嚷，他只是每天很安静很安静的，撑着一把黑伞，蹲在墙边，不吃不喝的。\n大夫决定对病人进行治疗。可是他用尽了所有的办法，一点成效都没有，那个病人始终都不理睬他，对他的任何话和行为都没有反应。\n最后，那个大夫也去找了把黑伞来，和病人一样撑着伞蹲在墙角，默默的，丝毫不打扰他。\n终于，太阳落山的时候，那个病人缓缓的转头，看了大夫一眼，然后他笑了，轻声的说：‘请问，你也是一只蘑菇吗？’”\n\n\n后来看见这个故事的续集\n>那个大夫就这样每天陪着病人，撑着伞蹲在墙角，默默的，丝毫不打扰他。时间久了，病人渐渐认同大夫和自己一样，也是一只蘑菇。\n有一天，大夫忽然站起来，伸手伸脚活络身体，围着桌子跑圈。病人感到很奇怪，疑惑的问他：‘你不是一只蘑菇吗？’\n“我是啊！”大夫回答说。\n“那你怎么可以走来走去？！”病人更惊讶了。\n“蘑菇当然可以走来走去！”大夫理直气壮。\n病人觉得有道理，后来，他也开始站起来走来走去。\n又有一天，大夫端来很香的饭菜，坐在病人身边大吃大喝。病人感到很奇怪，疑惑的问他：“难道，你不是一只蘑菇吗？”\n“我当然是一只蘑菇！”大夫回答说。\n“那你怎么可以吃东西呢？！”病人更惊讶了。\n“谁说蘑菇不可以吃东西？！蘑菇当然可以吃东西！”大夫理直气壮的，咬了一口鸡腿。\n病人觉得很有道理，于是他也开始吃东西。\n后来这个病人就康复了，很快他出院了，像一个正常人一样的生活，虽然在他的心底，他依旧认为自己是一只蘑菇。\n\n每个人都有蘑菇的一面，在自己的世界，向阴生长。不过，不需担心，因为总能遇到一个人走到你身边，蹲下来。\n而这时你只用问一句：“请问，你也是一只蘑菇吗？” 就好了。\n\n","source":"_posts/请问，你也是一只蘑菇吗.md","raw":"title: 请问，你也是一只蘑菇吗\ntag: 矫情不是病\n---\n\n我博客名字的来源。\n<!--more-->\n\n以前听过一个冷笑话\n>在一家精神病医院里，有个新来的大夫，收治了一个病人。那个病人很奇怪，既不疯疯癫癫打人，也不大呼小叫吵吵嚷嚷，他只是每天很安静很安静的，撑着一把黑伞，蹲在墙边，不吃不喝的。\n大夫决定对病人进行治疗。可是他用尽了所有的办法，一点成效都没有，那个病人始终都不理睬他，对他的任何话和行为都没有反应。\n最后，那个大夫也去找了把黑伞来，和病人一样撑着伞蹲在墙角，默默的，丝毫不打扰他。\n终于，太阳落山的时候，那个病人缓缓的转头，看了大夫一眼，然后他笑了，轻声的说：‘请问，你也是一只蘑菇吗？’”\n\n\n后来看见这个故事的续集\n>那个大夫就这样每天陪着病人，撑着伞蹲在墙角，默默的，丝毫不打扰他。时间久了，病人渐渐认同大夫和自己一样，也是一只蘑菇。\n有一天，大夫忽然站起来，伸手伸脚活络身体，围着桌子跑圈。病人感到很奇怪，疑惑的问他：‘你不是一只蘑菇吗？’\n“我是啊！”大夫回答说。\n“那你怎么可以走来走去？！”病人更惊讶了。\n“蘑菇当然可以走来走去！”大夫理直气壮。\n病人觉得有道理，后来，他也开始站起来走来走去。\n又有一天，大夫端来很香的饭菜，坐在病人身边大吃大喝。病人感到很奇怪，疑惑的问他：“难道，你不是一只蘑菇吗？”\n“我当然是一只蘑菇！”大夫回答说。\n“那你怎么可以吃东西呢？！”病人更惊讶了。\n“谁说蘑菇不可以吃东西？！蘑菇当然可以吃东西！”大夫理直气壮的，咬了一口鸡腿。\n病人觉得很有道理，于是他也开始吃东西。\n后来这个病人就康复了，很快他出院了，像一个正常人一样的生活，虽然在他的心底，他依旧认为自己是一只蘑菇。\n\n每个人都有蘑菇的一面，在自己的世界，向阴生长。不过，不需担心，因为总能遇到一个人走到你身边，蹲下来。\n而这时你只用问一句：“请问，你也是一只蘑菇吗？” 就好了。\n\n","slug":"请问，你也是一只蘑菇吗","published":1,"date":"2015-11-11T14:17:26.640Z","updated":"2015-11-11T14:17:26.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fhi0001u4rkxob98irr"},{"title":"请问您今天要来点兔子吗","_content":"再次推一下萌出血的点兔第二季ED（循环洗脑版！！）\n顺便 \nmarkdown 嵌入视频测试~ \n\niframe部分的代码是从A站拷的 科科\n\n<iframe id=\"ACFlashPlayer-re\" frameborder=\"0\" allowfullscreen=\"\" src=\"https://ssl.acfun.tv/block-player-homura.html?salt=167350321&amp;forFlash_=edae4e96-0f5e-4e15-d4c8-5b6c74bd3515,s106,ac2260637,#token=d2d835iu51nn4s4i;vid=2770596;postMessage=1;autoplay=0;fullscreen=0;from=http://www.acfun.tv;hint=小贴士：按下“←”和“→”键即可后退或前进一小段。\" style=\"height: 592px; width: 700px; left: 0px; top: 0px;\"></iframe>","source":"_posts/请问您今天要来点兔子吗.md","raw":"title: 请问您今天要来点兔子吗\ntag: 二次元\n---\n再次推一下萌出血的点兔第二季ED（循环洗脑版！！）\n顺便 \nmarkdown 嵌入视频测试~ \n\niframe部分的代码是从A站拷的 科科\n\n<iframe id=\"ACFlashPlayer-re\" frameborder=\"0\" allowfullscreen=\"\" src=\"https://ssl.acfun.tv/block-player-homura.html?salt=167350321&amp;forFlash_=edae4e96-0f5e-4e15-d4c8-5b6c74bd3515,s106,ac2260637,#token=d2d835iu51nn4s4i;vid=2770596;postMessage=1;autoplay=0;fullscreen=0;from=http://www.acfun.tv;hint=小贴士：按下“←”和“→”键即可后退或前进一小段。\" style=\"height: 592px; width: 700px; left: 0px; top: 0px;\"></iframe>","slug":"请问您今天要来点兔子吗","published":1,"date":"2015-11-11T14:17:26.639Z","updated":"2015-11-11T14:17:26.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fht0004u4rk0pb7tcny"},{"title":"用js原生实现Ajax的get和post","date":"2015-08-18T02:17:50.000Z","_content":"\n虽然jquery的ajax挺方便，但是了解了原生实现的原理也是很不错的。而且封装好的原生Js Ajax用起来也挺方便的~ XD~\n<!--more-->\n\n#### 参数序列化函数\n\n\tfunction serialize (data) {//将参数序列化\n    \tif (!data) return '';\n    \tvar pairs = [];\n    \tfor (var name in data){\n        \tif (!data.hasOwnerProperty(name)) continue;\n        \tif (typeof data[name] === 'function') continue;\n       \t\tvar value = data[name].toString();\n       \t\tname = uncodeURIComponent(name);\n        \tvalue = uncodeURIComponent(value);\n        \tpairs.push(name + '=' + value);\n    \t}\n    \treturn pairs.join('&');\n\t}\n\n#### 原生封装Ajax的get方法\n\n\tfunction get(url,options,callback){\n    \tvar xhr = new XMLHttpRequest();\n    \txhr.onreadystatechange = function (){\n       \t\tif (xhr.readyState == 4) {\n            \tif ((xhr.status > 200 && xhr.status < 300) || xhr.status == 304) {\n               \t\tcallback(xhr.responseText);\n            }else {\n                alert(\"request failed : \" + xhr.status);\n            }\n        };\n    }\n    xhr.open(\"get\",url + \"?\" + serialize(options),true);\n    xhr.send(null);//get 不将数据作为参数传入\n    }\n\t\t\n***调用方式***：\n\n\tget(url,json,function(data){\n\t\tconsole.log('data');\n\t\t//如果data为json对象，需要JSON.parse(data)解析之后才可以用\n\t})\n\n\n#### 原生封装Ajax的post方法\n\t\t\n\t\tfunction post(url, options, callback) {\n    \t\tvar xhr = new XMLHttpRequest();\n    \t\txhr.onreadystatechange = function(callback) {\n        \tif(xhr.readyState == 4) {\n           \t\tif((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n                \tcallback(xhr.responseText);\n           \t\t}else {\n               \t\talert('request failed!' + xhr.status);\n            \t}\n       \t\t}\n    \t}\n    \txhr.open('post', url, true);\n    \txhr.send(serialize(options));\n    }\n      \n\t//用法：getCookie(\"loginSuc\");\n\t\n","source":"_posts/用js原生实现Ajax的get和post.md","raw":"title: 用js原生实现Ajax的get和post\ndate: 2015-08-18 10:17:50\ntags: Javascript学习笔记\n\n---\n\n虽然jquery的ajax挺方便，但是了解了原生实现的原理也是很不错的。而且封装好的原生Js Ajax用起来也挺方便的~ XD~\n<!--more-->\n\n#### 参数序列化函数\n\n\tfunction serialize (data) {//将参数序列化\n    \tif (!data) return '';\n    \tvar pairs = [];\n    \tfor (var name in data){\n        \tif (!data.hasOwnerProperty(name)) continue;\n        \tif (typeof data[name] === 'function') continue;\n       \t\tvar value = data[name].toString();\n       \t\tname = uncodeURIComponent(name);\n        \tvalue = uncodeURIComponent(value);\n        \tpairs.push(name + '=' + value);\n    \t}\n    \treturn pairs.join('&');\n\t}\n\n#### 原生封装Ajax的get方法\n\n\tfunction get(url,options,callback){\n    \tvar xhr = new XMLHttpRequest();\n    \txhr.onreadystatechange = function (){\n       \t\tif (xhr.readyState == 4) {\n            \tif ((xhr.status > 200 && xhr.status < 300) || xhr.status == 304) {\n               \t\tcallback(xhr.responseText);\n            }else {\n                alert(\"request failed : \" + xhr.status);\n            }\n        };\n    }\n    xhr.open(\"get\",url + \"?\" + serialize(options),true);\n    xhr.send(null);//get 不将数据作为参数传入\n    }\n\t\t\n***调用方式***：\n\n\tget(url,json,function(data){\n\t\tconsole.log('data');\n\t\t//如果data为json对象，需要JSON.parse(data)解析之后才可以用\n\t})\n\n\n#### 原生封装Ajax的post方法\n\t\t\n\t\tfunction post(url, options, callback) {\n    \t\tvar xhr = new XMLHttpRequest();\n    \t\txhr.onreadystatechange = function(callback) {\n        \tif(xhr.readyState == 4) {\n           \t\tif((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n                \tcallback(xhr.responseText);\n           \t\t}else {\n               \t\talert('request failed!' + xhr.status);\n            \t}\n       \t\t}\n    \t}\n    \txhr.open('post', url, true);\n    \txhr.send(serialize(options));\n    }\n      \n\t//用法：getCookie(\"loginSuc\");\n\t\n","slug":"用js原生实现Ajax的get和post","published":1,"updated":"2015-11-11T14:17:26.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fhy0007u4rk45vsdpja"},{"title":"浏览器的重绘与重排","update":"2015/9/23 20:46:25","_content":"\n前端开发的过程中，我们不仅要实现设计师提供的炫酷设计稿，同时还要考虑到用最好的方式，最优的性能去实现它。为此，我们需要了解浏览器的重绘与重排概念。\n<!--more-->\n首先我们要先了解浏览器从下载文档到显示页面的过程，这里面就包含了重绘与重排。\n>简单讲，通常在文档初次加载时，浏览器引擎会解析HTML文档来构建DOM树，之后根据DOM元素的几何属性构建一棵用于渲染的树。渲染树的每个节点都有大小和边距等属性，类似于盒子模型（由于隐藏元素不需要显示，渲染树中并不包含DOM树中隐藏的元素）。当渲染树构建完成后，浏览器就可以将元素放置到正确的位置了，再根据渲染树节点的样式属性绘制出页面。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。\n\n重绘的概念：\n>重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。\n\n重排（也称作回流）是更明显的一种改变，可以理解为渲染树需要重新计算。\n\n触发重排的常见情况有三种：\n1. DOM元素的几何属性变化\n一个DOM元素的几何属性实现改变，会使浏览器重新构建此节点，而且也许会带来相关元素的重排。浏览器会计算相关元素如兄弟元素、子元素的尺寸，进行重新绘制。可见，重排一定会引起浏览器的重绘，一个元素的重排通常带来一系列的反应，性能代价是高昂的。\n\n2. DOM树的结构变化\n    当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器的布局过程类似于树的前序遍历，是一个从从上到下从左到右的过程。所以，如果在Body最前面插入一个元素，会导致整个文档树的重排，而在最后插入元素，不会影响前面的元素。\n3. 获取某些属性\n    当获取某些属性时，浏览器为了取得正确的值，也会触发重排。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle()\n\n    所以，在多次使用这些值时，应该进行缓存。\n\n开发中减少重排次数和缩小重排范围的方法：\n1. 将多次改变样式属性的操作合并为一次操作，也就是将需要改变的的样式写在css中，并给一个类名，在js中只需要改变className即可。\n\n2. 需要多次重排的元素，position值最好为absolute或者fix，让它脱离文档流，这样就不会影响其他元素。所以有动画效果的元素最好设置绝对定位。\n\n3. 需要增加多个节点，可以一次性构建一个html片段，然后一次性添加到文档中去，而不是循环添加每一行。\n\n4. 由于display为none的元素不再渲染树中，对隐藏元素的操作不会引发其他元素的重排。如果要对一个元素进行复杂操作，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n\n5. 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。","source":"_posts/浏览器的重绘与重排.md","raw":"title: 浏览器的重绘与重排\nupdate: 2015/9/23 20:46:25\ntag: web前端知识\n---\n\n前端开发的过程中，我们不仅要实现设计师提供的炫酷设计稿，同时还要考虑到用最好的方式，最优的性能去实现它。为此，我们需要了解浏览器的重绘与重排概念。\n<!--more-->\n首先我们要先了解浏览器从下载文档到显示页面的过程，这里面就包含了重绘与重排。\n>简单讲，通常在文档初次加载时，浏览器引擎会解析HTML文档来构建DOM树，之后根据DOM元素的几何属性构建一棵用于渲染的树。渲染树的每个节点都有大小和边距等属性，类似于盒子模型（由于隐藏元素不需要显示，渲染树中并不包含DOM树中隐藏的元素）。当渲染树构建完成后，浏览器就可以将元素放置到正确的位置了，再根据渲染树节点的样式属性绘制出页面。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。\n\n重绘的概念：\n>重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。\n\n重排（也称作回流）是更明显的一种改变，可以理解为渲染树需要重新计算。\n\n触发重排的常见情况有三种：\n1. DOM元素的几何属性变化\n一个DOM元素的几何属性实现改变，会使浏览器重新构建此节点，而且也许会带来相关元素的重排。浏览器会计算相关元素如兄弟元素、子元素的尺寸，进行重新绘制。可见，重排一定会引起浏览器的重绘，一个元素的重排通常带来一系列的反应，性能代价是高昂的。\n\n2. DOM树的结构变化\n    当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器的布局过程类似于树的前序遍历，是一个从从上到下从左到右的过程。所以，如果在Body最前面插入一个元素，会导致整个文档树的重排，而在最后插入元素，不会影响前面的元素。\n3. 获取某些属性\n    当获取某些属性时，浏览器为了取得正确的值，也会触发重排。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle()\n\n    所以，在多次使用这些值时，应该进行缓存。\n\n开发中减少重排次数和缩小重排范围的方法：\n1. 将多次改变样式属性的操作合并为一次操作，也就是将需要改变的的样式写在css中，并给一个类名，在js中只需要改变className即可。\n\n2. 需要多次重排的元素，position值最好为absolute或者fix，让它脱离文档流，这样就不会影响其他元素。所以有动画效果的元素最好设置绝对定位。\n\n3. 需要增加多个节点，可以一次性构建一个html片段，然后一次性添加到文档中去，而不是循环添加每一行。\n\n4. 由于display为none的元素不再渲染树中，对隐藏元素的操作不会引发其他元素的重排。如果要对一个元素进行复杂操作，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n\n5. 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。","slug":"浏览器的重绘与重排","published":1,"date":"2015-11-11T14:17:26.639Z","updated":"2015-11-11T14:17:26.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fi6000au4rk5rk7fvss"},{"title":"学习日报 2015-09-23——2015-09-25","_content":"刚过完中秋节，来补日报了。\n<!--more-->\n### 2015-09-25\n#### 一、今天学习了\n1. canvas的图像绘制、图片像素处理等api；\n2. svg\n\n#### 二、今天完成了\n1. 利用canvas完成了图片处理的网页，见http://cky917.github.io/zbjstudy/day14/index.html\n2. 学习了canvas的api 感觉很好玩\n \n \n### 2015-09-24\n### 一、今天学习了\n1. 性能优化，加快网页加载速度的方法\n2. 异步加载\n\n### 二、今天完成了\n1. 老师上课的时候提了几个概念和知识点，我下午进行了一下深入了解学习。主要包括：\n    1.  客户端缓存\n    2.  cache-control、expires、last-Modify\n    3.  强制清除缓存的方法\n    4.  从setTimeout看js的运行机制。\n2. promise的实例代码测试和电子书学习\n\n### 2015-09-23\n今天没有上课，主要是消化一下前面的知识。\n趁着这个机会，我今天主要研究了几个课上老师提出的问题以及自己还不是很了解的知识点 \n1. 当初面试的时候问我浏览器的重排（回流）和重绘，我没回答上，今天对这两个概念进行了学习。\n2. HTTP 协议中 URI 和 URL 有什么区别？\n3. 从输入 URL 到页面加载完成的过程中都发生了什么事情\n4. 详解js跨域问题\n5. 面试时问了我闭包的坏处，也没回答上。所以今天研究了闭包和内存泄露的问题。\n6. 看了一个smarty的教程，因为教程没有结合fis3，所以看了教程还是有点云里雾里 - - 感觉没有php的基础，用smarty比之前用的django模板要难啊","source":"_posts/学习日报2015-09-23——2015-09-25.md","raw":"title: 学习日报 2015-09-23——2015-09-25\ntag: 学习日报\n---\n刚过完中秋节，来补日报了。\n<!--more-->\n### 2015-09-25\n#### 一、今天学习了\n1. canvas的图像绘制、图片像素处理等api；\n2. svg\n\n#### 二、今天完成了\n1. 利用canvas完成了图片处理的网页，见http://cky917.github.io/zbjstudy/day14/index.html\n2. 学习了canvas的api 感觉很好玩\n \n \n### 2015-09-24\n### 一、今天学习了\n1. 性能优化，加快网页加载速度的方法\n2. 异步加载\n\n### 二、今天完成了\n1. 老师上课的时候提了几个概念和知识点，我下午进行了一下深入了解学习。主要包括：\n    1.  客户端缓存\n    2.  cache-control、expires、last-Modify\n    3.  强制清除缓存的方法\n    4.  从setTimeout看js的运行机制。\n2. promise的实例代码测试和电子书学习\n\n### 2015-09-23\n今天没有上课，主要是消化一下前面的知识。\n趁着这个机会，我今天主要研究了几个课上老师提出的问题以及自己还不是很了解的知识点 \n1. 当初面试的时候问我浏览器的重排（回流）和重绘，我没回答上，今天对这两个概念进行了学习。\n2. HTTP 协议中 URI 和 URL 有什么区别？\n3. 从输入 URL 到页面加载完成的过程中都发生了什么事情\n4. 详解js跨域问题\n5. 面试时问了我闭包的坏处，也没回答上。所以今天研究了闭包和内存泄露的问题。\n6. 看了一个smarty的教程，因为教程没有结合fis3，所以看了教程还是有点云里雾里 - - 感觉没有php的基础，用smarty比之前用的django模板要难啊","slug":"学习日报2015-09-23——2015-09-25","published":1,"date":"2015-11-11T14:17:26.638Z","updated":"2015-11-11T14:17:26.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fia000du4rkr3gzml02"},{"title":"学习日报 2015-09-16——2015-09-22","_content":"\n好久没有更新日报了- - 前几天忙着找房子，终于结束了每天来回奔波几个小时的悲惨生活。这几天学习进度又很赶，没时间写博客（其实就是懒- -）今天老师忙校招去了，让我们好好消化一下前几天的知识，所以今天就有了时间继续写日报啦~ 今天就直接把这几天的日报总结起来写好了。\n<!--more-->\n\n---\n###  2015-09-22\n\n####  一、今日学习了\n1. 正则表达式\n2. 前后端模板，主要是smarty\n\n####  二、今日完成了\n1. 任务一：完成规定正则表达式书写 :\n    1. 书写一个正则表达式匹配ip地址：\n            /((?:(?:25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))\\.){3}(?:25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d))))/\n\n    2. 书写一个正则表达式匹配邮箱地址:\n            /^([a-z0-9_])+@([a-z0-9_])+\\.([a-z0-9_])+/i\n\n    刚开始一直在纠结为什么上面的正则能够运行成功，而`/^([a-z0-9_])+@\\1+\\.\\1+/i`不能，后来查阅资料后发现是因为正则的后向引用，引用的就是匹配成功后的内容，引用的是结果，而不是表达式。\n    如果用`/^([a-z0-9_])+@\\1+\\.\\1+/ig `来匹配`zhubajie@zhubajie.zhubajie`则能够成功匹配，因为`\\1`的匹配结果只是`zhubajie`而已。\n\n    3. 书写一个正则表达式验证字符串包括了小写字母、大写字母、数字中至少两种字符\n            /([a-z]+[A-Z0-9][a-zA-Z0-9]*)|([A-Z]+[a-z0-9][a-zA-Z0-9]*)|([0-9]+[a-zA-Z][a-zA-Z0-9]*)/g\n\n2. 任务二：安装wamp和java运行时环境\n3. 将天棚网之前的json数据在php文件中构成模拟数组，并通过smarty语法页面上渲染输出。主要是为了让我们熟悉smarty。\n\n---\n\n### 2015-09-21\n \n#### 一、今日学习了\n1. chrome调试工具，以前调试js大部分的console.log()、alert() 很少利用断点- -，今天又学到了很多关于chrome开发者工具的新技能。\n2. http协议 对于同源和跨域有了深入了解 ，但是感觉自己计算机基础还需要重新复习。。\n3. ajax ，很好用的一个东西\n4. WebSocket与实时通讯，感觉很厉害，但是还没有实际操作过。\n\n#### 二、今日完成了\n1. 任务一：模拟json数据，用ajax完成day2的“海量作品”部分标签切换。同时我参考了天蓬网官网的方案，实现只有第一次点击标签时发送请求，之后都不发送请求，而是用之前已经缓存好的数据。http://cky917.github.io/zbjstudy/output/day2/day2.html\n2. 任务二：打开 http://task.t6.zbj.com/, 在首页的幻灯片执行的时候断点，找到 幻灯片执行函数和 播放按钮 绑定的事件，附上截图。 https://github.com/cky917/zbjstudy/blob/master/day10/task2.md\n3. 任务三：安装 PageSpeed，对猪八戒首页进行测试，提出提升速度的改进措施。https://github.com/cky917/zbjstudy/blob/master/day10/task3.md\n4. 任务四：通过网络请求，查看猪八戒首页引用了什么字体，附上截图。https://github.com/cky917/zbjstudy/blob/master/day10/task4.md\n\n---\n### 2015-09-18 \n \n#### 一、今日学习了\n1. html、css、js的模块化思想，amd、cmd；\n2. less、sea.js等工具\n2. 团队协作流程，前后端接口的制定方法\n\n#### 二、今日完成了\n1. 针对day2天蓬网的前端后端交互制定了数据接口文档\n2. 重构day2 天蓬网的html、css、js代码，用了模块化的思想。因为html css之前写的时候就有注意模块化，所以没怎么改。主要用了闭包封装的方式重构了js代码，感觉在这方面有了很大收获，对以后的代码风格也有帮助。\n\n---\n### 2015-09-17\n\n#### 一、今日学习：\n1.  移动开发的相关知识：\n    1. 地理信息\n    2. 重力感应\n    3. 网络连接信息\n    4. 微信JSSDK\n    5. 混合模式通信\n对移动开发挺有兴趣的，毕竟移动端也是一个很大的市场。今天的课主要是给了一个学习方向，还是需要自己多多研究。\n\n2. 响应式布局：媒体查询，px em rem的区别；\n\n\n#### 二、今日完成了&收获了:\n1. 做了一个指南针。\n2. 完成day2的导航响应式布局\n \n---\n### 2015-09-16\n\n#### 一、今日学习：\n1. js BOM相关知识；\n2. js DOM相关知识；\n3. js 事件相关知识；\n\n#### 二、今日完成了&收获了:\n1. day7作业，天蓬网Banner轮播，海量作品点击标签切换显示内容 完成效果见：http://cky917.github.io/zbjstudy/output/day2/day2.html；\n2. 对于定时器又回顾了一下，开始在做轮播时并没有完全清除定时器，导致后来图片越切越快，后来想到在定时器开始前都清除一下，解决了BUG；\n3. 做了一些测试数据，用字符串拼接的方式，不是很好的方案，但是没有用后台模板时，暂时还想不到其他方案- -","source":"_posts/学习日报 2015-09-16——2015-09-22.md","raw":"title: 学习日报 2015-09-16——2015-09-22\ntag: 学习日报\n---\n\n好久没有更新日报了- - 前几天忙着找房子，终于结束了每天来回奔波几个小时的悲惨生活。这几天学习进度又很赶，没时间写博客（其实就是懒- -）今天老师忙校招去了，让我们好好消化一下前几天的知识，所以今天就有了时间继续写日报啦~ 今天就直接把这几天的日报总结起来写好了。\n<!--more-->\n\n---\n###  2015-09-22\n\n####  一、今日学习了\n1. 正则表达式\n2. 前后端模板，主要是smarty\n\n####  二、今日完成了\n1. 任务一：完成规定正则表达式书写 :\n    1. 书写一个正则表达式匹配ip地址：\n            /((?:(?:25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))\\.){3}(?:25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d))))/\n\n    2. 书写一个正则表达式匹配邮箱地址:\n            /^([a-z0-9_])+@([a-z0-9_])+\\.([a-z0-9_])+/i\n\n    刚开始一直在纠结为什么上面的正则能够运行成功，而`/^([a-z0-9_])+@\\1+\\.\\1+/i`不能，后来查阅资料后发现是因为正则的后向引用，引用的就是匹配成功后的内容，引用的是结果，而不是表达式。\n    如果用`/^([a-z0-9_])+@\\1+\\.\\1+/ig `来匹配`zhubajie@zhubajie.zhubajie`则能够成功匹配，因为`\\1`的匹配结果只是`zhubajie`而已。\n\n    3. 书写一个正则表达式验证字符串包括了小写字母、大写字母、数字中至少两种字符\n            /([a-z]+[A-Z0-9][a-zA-Z0-9]*)|([A-Z]+[a-z0-9][a-zA-Z0-9]*)|([0-9]+[a-zA-Z][a-zA-Z0-9]*)/g\n\n2. 任务二：安装wamp和java运行时环境\n3. 将天棚网之前的json数据在php文件中构成模拟数组，并通过smarty语法页面上渲染输出。主要是为了让我们熟悉smarty。\n\n---\n\n### 2015-09-21\n \n#### 一、今日学习了\n1. chrome调试工具，以前调试js大部分的console.log()、alert() 很少利用断点- -，今天又学到了很多关于chrome开发者工具的新技能。\n2. http协议 对于同源和跨域有了深入了解 ，但是感觉自己计算机基础还需要重新复习。。\n3. ajax ，很好用的一个东西\n4. WebSocket与实时通讯，感觉很厉害，但是还没有实际操作过。\n\n#### 二、今日完成了\n1. 任务一：模拟json数据，用ajax完成day2的“海量作品”部分标签切换。同时我参考了天蓬网官网的方案，实现只有第一次点击标签时发送请求，之后都不发送请求，而是用之前已经缓存好的数据。http://cky917.github.io/zbjstudy/output/day2/day2.html\n2. 任务二：打开 http://task.t6.zbj.com/, 在首页的幻灯片执行的时候断点，找到 幻灯片执行函数和 播放按钮 绑定的事件，附上截图。 https://github.com/cky917/zbjstudy/blob/master/day10/task2.md\n3. 任务三：安装 PageSpeed，对猪八戒首页进行测试，提出提升速度的改进措施。https://github.com/cky917/zbjstudy/blob/master/day10/task3.md\n4. 任务四：通过网络请求，查看猪八戒首页引用了什么字体，附上截图。https://github.com/cky917/zbjstudy/blob/master/day10/task4.md\n\n---\n### 2015-09-18 \n \n#### 一、今日学习了\n1. html、css、js的模块化思想，amd、cmd；\n2. less、sea.js等工具\n2. 团队协作流程，前后端接口的制定方法\n\n#### 二、今日完成了\n1. 针对day2天蓬网的前端后端交互制定了数据接口文档\n2. 重构day2 天蓬网的html、css、js代码，用了模块化的思想。因为html css之前写的时候就有注意模块化，所以没怎么改。主要用了闭包封装的方式重构了js代码，感觉在这方面有了很大收获，对以后的代码风格也有帮助。\n\n---\n### 2015-09-17\n\n#### 一、今日学习：\n1.  移动开发的相关知识：\n    1. 地理信息\n    2. 重力感应\n    3. 网络连接信息\n    4. 微信JSSDK\n    5. 混合模式通信\n对移动开发挺有兴趣的，毕竟移动端也是一个很大的市场。今天的课主要是给了一个学习方向，还是需要自己多多研究。\n\n2. 响应式布局：媒体查询，px em rem的区别；\n\n\n#### 二、今日完成了&收获了:\n1. 做了一个指南针。\n2. 完成day2的导航响应式布局\n \n---\n### 2015-09-16\n\n#### 一、今日学习：\n1. js BOM相关知识；\n2. js DOM相关知识；\n3. js 事件相关知识；\n\n#### 二、今日完成了&收获了:\n1. day7作业，天蓬网Banner轮播，海量作品点击标签切换显示内容 完成效果见：http://cky917.github.io/zbjstudy/output/day2/day2.html；\n2. 对于定时器又回顾了一下，开始在做轮播时并没有完全清除定时器，导致后来图片越切越快，后来想到在定时器开始前都清除一下，解决了BUG；\n3. 做了一些测试数据，用字符串拼接的方式，不是很好的方案，但是没有用后台模板时，暂时还想不到其他方案- -","slug":"学习日报 2015-09-16——2015-09-22","published":1,"date":"2015-11-11T14:17:26.638Z","updated":"2015-11-11T14:17:26.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fid000gu4rkqvirgydb"},{"title":"学习日报 2015-09-14","date":"2015-09-14T12:34:22.000Z","_content":"一、今日学习&收获了：\n1.css常见布局的几种实现方法；\n2.css兼容性\n3.js基础，js的几种类型以及识别方式,以及函数需要注意的一些点，发现自己对于基础的知识还是记忆不深。\n\n二、今日完成了:\n1.day5的作业，用 JavaScript 编写一个函数 输入： 一个正整数  输出：0 到输入间的所有回⽂文数字到控制台;\n2.上周五完成了day2的布局，今天主要解决了代码上传到Github上提示找不到css文件的问题，因为output的路径要是相对路径才能找到。所以今天成功上传至github，生成了gitpages；\n布局[完成效果](http://cky917.github.io/zbjstudy/output/day2/day2.html);\n \n三、明日目标：\n1.研究面向对象的编程方式。","source":"_posts/学习日报 2015-09-15.md","raw":"title: 学习日报 2015-09-14\ndate: 2015-09-14 20:34:22\ntag: 学习日报\n---\n一、今日学习&收获了：\n1.css常见布局的几种实现方法；\n2.css兼容性\n3.js基础，js的几种类型以及识别方式,以及函数需要注意的一些点，发现自己对于基础的知识还是记忆不深。\n\n二、今日完成了:\n1.day5的作业，用 JavaScript 编写一个函数 输入： 一个正整数  输出：0 到输入间的所有回⽂文数字到控制台;\n2.上周五完成了day2的布局，今天主要解决了代码上传到Github上提示找不到css文件的问题，因为output的路径要是相对路径才能找到。所以今天成功上传至github，生成了gitpages；\n布局[完成效果](http://cky917.github.io/zbjstudy/output/day2/day2.html);\n \n三、明日目标：\n1.研究面向对象的编程方式。","slug":"学习日报 2015-09-15","published":1,"updated":"2015-11-11T14:17:26.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fih000iu4rkxx07kikv"},{"title":"学习日报 2015-09-11","date":"2015-09-11T14:13:50.000Z","_content":"今天完成了：\n\n1.对前几天的知识查漏补缺\n2.完成了作业：测试图片加载资源的行为，测试结果如下：[文档](http://git.zhubajie.la/fetraining/chenkeyi/blob/master/day4/day4.md)\n3.完成了day2作业的天蓬网的css，并且兼容到了ie8；","source":"_posts/学习日报 2015-09-11.md","raw":"title: 学习日报 2015-09-11\ndate: 2015-09-11 22:13:50\ntag: 学习日报\n---\n今天完成了：\n\n1.对前几天的知识查漏补缺\n2.完成了作业：测试图片加载资源的行为，测试结果如下：[文档](http://git.zhubajie.la/fetraining/chenkeyi/blob/master/day4/day4.md)\n3.完成了day2作业的天蓬网的css，并且兼容到了ie8；","slug":"学习日报 2015-09-11","published":1,"updated":"2015-11-11T14:17:26.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fil000ku4rkg5alx9po"},{"title":"学习日报 2015-09-10","date":"2015-09-10T12:17:50.000Z","_content":"话说每天都赶1个半小时的车程来回学校和公司还是有点伤啊…洗完澡都23点30分了- -\n<!--more-->\n### 一、今天学习&收获了：\n1. css以及css3基础，css3动画。\n2. css选择器、盒模型、定位。\n3. css3真的是一个神奇的东西，虽然在PC端依然有很多兼容性问题，但是在移动端用起来简直爽啊。想半年前起了学习前端的念头时候，也是因为炫酷的css3动画，之后还要好好研究研究。\n\n### 二、今天的完成了：\n\n1. 作业1 用1个标签、2个标签、3个标签、5个标签实现十字架；[实现效果](http://cky917.github.io/zbjstudy/day3/test1.html)\n2. 作业2 用css3实现相应的动画；[实现效果](http://cky917.github.io/zbjstudy/day3/test2.html)\n3. 实现了一部分day2的css布局;\n\n### 三、问题：\n\n1. 关于FIS3的问题，我在本地的服务器上可以正常浏览。但是我把文件上传到github上，就告诉我css路径不对..还得接着研究..","source":"_posts/学习日报 2015-09-10.md","raw":"title: 学习日报 2015-09-10\ndate: 2015-09-10 20:17:50\ntag: 学习日报\n---\n话说每天都赶1个半小时的车程来回学校和公司还是有点伤啊…洗完澡都23点30分了- -\n<!--more-->\n### 一、今天学习&收获了：\n1. css以及css3基础，css3动画。\n2. css选择器、盒模型、定位。\n3. css3真的是一个神奇的东西，虽然在PC端依然有很多兼容性问题，但是在移动端用起来简直爽啊。想半年前起了学习前端的念头时候，也是因为炫酷的css3动画，之后还要好好研究研究。\n\n### 二、今天的完成了：\n\n1. 作业1 用1个标签、2个标签、3个标签、5个标签实现十字架；[实现效果](http://cky917.github.io/zbjstudy/day3/test1.html)\n2. 作业2 用css3实现相应的动画；[实现效果](http://cky917.github.io/zbjstudy/day3/test2.html)\n3. 实现了一部分day2的css布局;\n\n### 三、问题：\n\n1. 关于FIS3的问题，我在本地的服务器上可以正常浏览。但是我把文件上传到github上，就告诉我css路径不对..还得接着研究..","slug":"学习日报 2015-09-10","published":1,"updated":"2015-11-11T14:17:26.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fio000mu4rknkhxc43n"},{"title":"学习日报 2015-09-09","date":"2015-09-09T15:16:34.000Z","_content":"实习第二天，又来写日报啦。\n<!--more-->\n### 一、今天学习&收获了：\n1. HTML基础知识，标签的使用规范；\n2. 切图技巧、思路，在切图前首先要大致分析一遍设计图，想好哪些图是要切的，哪些图是用字体图标的，哪些部分是要写的，哪些部分是可以用现成的组件的。\n3. 今天还学了最新的photoshop cc2014更方便的切图方法,简直神器；\n4. 前端工具的使用，如PS、FIS；\n5. stay hungry , stay foolish.\n\n### 二、今天的完成了：\n1. 根据老师给的天蓬网主页PSD文件进行了HTML结构排版。\n2. 研究FIS3工具，之前由于FIS3自带的某个文件有错误，FIS3 init一直无法成功，后来研究了一阵，把报错文件的错误行给注释掉之后终于成功进行fis3 init，耽误了一些时间。\n3. 切出需要的图片后，运用FIS3工具生成了雪碧图 参考资料。\n\n### 三、明天计划\n1. 继续深入学习FIS3的功能。\n2. 完善今天的HTML结构，完成CSS布局。","source":"_posts/学习日报 2015-09-09.md","raw":"title: 学习日报 2015-09-09\ndate: 2015-09-09 23:16:34\ntag: 学习日报\n---\n实习第二天，又来写日报啦。\n<!--more-->\n### 一、今天学习&收获了：\n1. HTML基础知识，标签的使用规范；\n2. 切图技巧、思路，在切图前首先要大致分析一遍设计图，想好哪些图是要切的，哪些图是用字体图标的，哪些部分是要写的，哪些部分是可以用现成的组件的。\n3. 今天还学了最新的photoshop cc2014更方便的切图方法,简直神器；\n4. 前端工具的使用，如PS、FIS；\n5. stay hungry , stay foolish.\n\n### 二、今天的完成了：\n1. 根据老师给的天蓬网主页PSD文件进行了HTML结构排版。\n2. 研究FIS3工具，之前由于FIS3自带的某个文件有错误，FIS3 init一直无法成功，后来研究了一阵，把报错文件的错误行给注释掉之后终于成功进行fis3 init，耽误了一些时间。\n3. 切出需要的图片后，运用FIS3工具生成了雪碧图 参考资料。\n\n### 三、明天计划\n1. 继续深入学习FIS3的功能。\n2. 完善今天的HTML结构，完成CSS布局。","slug":"学习日报 2015-09-09","published":1,"updated":"2015-11-11T14:17:26.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fir000ou4rktmkczfrh"},{"title":"学习日报 2015-09-08","date":"2015-09-08T02:17:50.000Z","_content":"最近加入了重庆猪八戒，进行前端实习。公司要求每天写学习日报，正好对自己也是一个总结，所以在博客上也更新我的学习日报。希望能够坚持~\n<!--more-->\n### 一、今日主要学习内容\n\n1. 今天上午学习了前端开发工具、环境的下载和配置，还有猪八戒的前端规范。\n2. 下午进行了作业训练，注册了公司的gitlab账号并加入了group。创建了自己的git项目，并且上传了相应的作业文件。\n3. 今天安装了git、node、fis、ps。\n\n### 二、今日收获\n\n1. git之前有接触过，熟悉一些常用的命令，也帮助了一起实习的同学关于git的一些问题，他们之前大都用的SVN。\n2. 不过我之前一直使用的是git pull，今天老师说git pull不建议使用，因为git pull = git fetch+git merge，又学到了（不过在自己个人的小项目上还是喜欢用git pull偷懒- -)。\n3. node和fis一直处于不明觉厉的阶段，期待有更多实践上的指导和学习。\n4. 关于猪八戒前端规范，和我之前了解的前端规范基本差不多，而且更细致一些。只有做到规范化的代码，能大大减少团队合作的阻力和后期维护成本。\n5. 还有今天用上了公司提供的翻墙软件，开心。之前红杏被封了好久没出墙了- -","source":"_posts/学习日报 2015-09-08.md","raw":"title: 学习日报 2015-09-08\ndate: 2015-09-08 10:17:50\ntag: 学习日报\n---\n最近加入了重庆猪八戒，进行前端实习。公司要求每天写学习日报，正好对自己也是一个总结，所以在博客上也更新我的学习日报。希望能够坚持~\n<!--more-->\n### 一、今日主要学习内容\n\n1. 今天上午学习了前端开发工具、环境的下载和配置，还有猪八戒的前端规范。\n2. 下午进行了作业训练，注册了公司的gitlab账号并加入了group。创建了自己的git项目，并且上传了相应的作业文件。\n3. 今天安装了git、node、fis、ps。\n\n### 二、今日收获\n\n1. git之前有接触过，熟悉一些常用的命令，也帮助了一起实习的同学关于git的一些问题，他们之前大都用的SVN。\n2. 不过我之前一直使用的是git pull，今天老师说git pull不建议使用，因为git pull = git fetch+git merge，又学到了（不过在自己个人的小项目上还是喜欢用git pull偷懒- -)。\n3. node和fis一直处于不明觉厉的阶段，期待有更多实践上的指导和学习。\n4. 关于猪八戒前端规范，和我之前了解的前端规范基本差不多，而且更细致一些。只有做到规范化的代码，能大大减少团队合作的阻力和后期维护成本。\n5. 还有今天用上了公司提供的翻墙软件，开心。之前红杏被封了好久没出墙了- -","slug":"学习日报 2015-09-08","published":1,"updated":"2015-11-11T14:17:26.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fit000qu4rku2hksrjt"},{"title":"好玩的cookie","date":"2015-07-25T02:17:50.000Z","_content":"最近接触了cookie，发现浏览器cookie真的挺好玩的，前端做的事也可以在网页关闭或刷新后依然存在，多难得啊（被用户清除了cookie就没办法了...）。cookie可以帮助前端实现一些用户行为储存，进而实现一些针对用户的操作。\n<!--more-->\ncookie的增删查改也并不难，但是有一些细节还是得注意。\n\n***cookie的设置/修改封装函数***\n\n1. 直接也可以设置:`document.cookie= 'name=value'`;\n2. 更推荐封装函数：\n\t\t// 设置expires\n\t\t// var date=new Date(); \n    \t// var expiresDays=10; \n    \t// 将date设置为10天以后的时间 \n    \t// date.setTime(date.getTime()+expiresDays*24*3600*1000); \n\t\tfunction setCookie(name,value,expires,path,domain,secure){\n\t\t\tvar cookie = encodeURIComponent(name) + '=' +encodeURIComponent(value);\n\t\t\tif(expires){\n\t\t\t\tcookie += ';expires=' + expires.toGMTString();//失效时间\n\t\t\t}\n\t\t\tif(path){\n\t\t\t\tcookie += ';path=' +path;\n\t\t\t}\n\t\t\tif(domain){\n\t\t\t\tcookie +=';secure' + secure;//http协议时生效，默认false\n\t\t\t}\n\t\t\tdocument.cookie = cookie;\n\t\t\t\n\t\t\t//用法：set(\"loginSuc\",\"yes\",date,path,domain,secure)\n\t\t}\n\t\t\n\n***cookie的获取封装函数***\n\t\t\n\t\tString.prototype.trim=function(){//去除字符串两端空格\n     \t\treturn this.replace(/(^\\s*)|(\\s*$)/g, ”); \n\t\t\t}\n\t\tfunction getcookie(Name) {\n   \t\t\tvar cookie = {};\n    \t\tvar all = document.cookie;\n   \t \t\tif (all === '')\n       \t\t\treturn cookie;\n    \t\tvar list = all.split('; ');\n    \t\tfor (var i = 0; i < list.length; i++) {\n        \t\tvar item = list[i];\n        \t\tvar p = item.indexOf('=');\n        \t\tvar name = item.substring(0, p);\n        \t\tname = decodeURIComponent(name).trim();//注意这里有个坑，除了第一个name，后面的name前面都有一个空格，所以要处理掉前面的空格才行；\n       \t\t\tvar value = item.substring(p + 1);\n        \t\tvalue = decodeURIComponent(value);\n        \t\tcookie[name] = value;\n    \t\t}\n    \t\treturn cookie[Name];\n\t\t}\n\t//用法：getCookie(\"loginSuc\");\n\t\n***cookie的删除函数封装***\n\n\tfunction removeCookie(name) { \n\t    var exp = new Date(); \n\t    exp.setTime(exp.getTime() - 1); \n\t    var cval=getCookie(name); \n\t    if(cval!=null) document.cookie= name + \"=\"+cval+\";expires=\"+exp.toGMTString(); \n\t} \n\t\n\n使用cookie我们可以设置用户的登录状态，亦或是点击了不再显示后就设置一个不再显示的cookie,通过获取cookie来达到效果。感觉棒棒哒！","source":"_posts/好玩的cookie.md","raw":"title: 好玩的cookie\ndate: 2015-07-25 10:17:50\ntags: Javascript学习笔记\n\n---\n最近接触了cookie，发现浏览器cookie真的挺好玩的，前端做的事也可以在网页关闭或刷新后依然存在，多难得啊（被用户清除了cookie就没办法了...）。cookie可以帮助前端实现一些用户行为储存，进而实现一些针对用户的操作。\n<!--more-->\ncookie的增删查改也并不难，但是有一些细节还是得注意。\n\n***cookie的设置/修改封装函数***\n\n1. 直接也可以设置:`document.cookie= 'name=value'`;\n2. 更推荐封装函数：\n\t\t// 设置expires\n\t\t// var date=new Date(); \n    \t// var expiresDays=10; \n    \t// 将date设置为10天以后的时间 \n    \t// date.setTime(date.getTime()+expiresDays*24*3600*1000); \n\t\tfunction setCookie(name,value,expires,path,domain,secure){\n\t\t\tvar cookie = encodeURIComponent(name) + '=' +encodeURIComponent(value);\n\t\t\tif(expires){\n\t\t\t\tcookie += ';expires=' + expires.toGMTString();//失效时间\n\t\t\t}\n\t\t\tif(path){\n\t\t\t\tcookie += ';path=' +path;\n\t\t\t}\n\t\t\tif(domain){\n\t\t\t\tcookie +=';secure' + secure;//http协议时生效，默认false\n\t\t\t}\n\t\t\tdocument.cookie = cookie;\n\t\t\t\n\t\t\t//用法：set(\"loginSuc\",\"yes\",date,path,domain,secure)\n\t\t}\n\t\t\n\n***cookie的获取封装函数***\n\t\t\n\t\tString.prototype.trim=function(){//去除字符串两端空格\n     \t\treturn this.replace(/(^\\s*)|(\\s*$)/g, ”); \n\t\t\t}\n\t\tfunction getcookie(Name) {\n   \t\t\tvar cookie = {};\n    \t\tvar all = document.cookie;\n   \t \t\tif (all === '')\n       \t\t\treturn cookie;\n    \t\tvar list = all.split('; ');\n    \t\tfor (var i = 0; i < list.length; i++) {\n        \t\tvar item = list[i];\n        \t\tvar p = item.indexOf('=');\n        \t\tvar name = item.substring(0, p);\n        \t\tname = decodeURIComponent(name).trim();//注意这里有个坑，除了第一个name，后面的name前面都有一个空格，所以要处理掉前面的空格才行；\n       \t\t\tvar value = item.substring(p + 1);\n        \t\tvalue = decodeURIComponent(value);\n        \t\tcookie[name] = value;\n    \t\t}\n    \t\treturn cookie[Name];\n\t\t}\n\t//用法：getCookie(\"loginSuc\");\n\t\n***cookie的删除函数封装***\n\n\tfunction removeCookie(name) { \n\t    var exp = new Date(); \n\t    exp.setTime(exp.getTime() - 1); \n\t    var cval=getCookie(name); \n\t    if(cval!=null) document.cookie= name + \"=\"+cval+\";expires=\"+exp.toGMTString(); \n\t} \n\t\n\n使用cookie我们可以设置用户的登录状态，亦或是点击了不再显示后就设置一个不再显示的cookie,通过获取cookie来达到效果。感觉棒棒哒！","slug":"好玩的cookie","published":1,"updated":"2015-11-11T14:17:26.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fiw000su4rkc68aruva"},{"title":"垂直居中布局的几种css实现方法","_content":"\n在开发中经常会需要实现一些居中布局问题，今天来总结一下垂直、水平居中布局的css实现方法。\n<!-- more -->\n### 任意高度的垂直居中布局\n\n#### 1.父元素tabel-cell +vertical-align\n此方法的优点：兼容性好，兼容ie8+。\n\n    <style type=\"text/css\">\n        .parent{\n            <!-- 样式内容省略 -->\n            display: tabel-cell;\n            vertical-align:middle;\n        }\n        .child{\n            <!-- 样式内容省略 -->\n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode1\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;display: table-cell;vertical-align:middle;}.child{background-color:#aaa;width:100%;}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode1')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n#### 2. absolute + transform\n优点：不会干扰其他元素  \n缺点：兼容性不好\n\n    <style>\n        .parent{\n            <!-- 样式内容省略 -->\n            position:relative;\n        }\n        .child{\n            <!-- 样式内容省略 -->\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            \n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode2\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;position:relative;}.child{background-color:#aaa;width:100%;line-height:100px;position: absolute;top: 50%;transform: translateY(-50%);}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode2')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n#### 3.flex+align-items\n优点：和第一种方法一样只需要对父元素设置 \n缺点：兼容性不好\n\n    <style type=\"text/css\">\n        .parent{\n            <!-- 样式内容省略 -->\n            display: flex;\n            align-items:center;\n        }\n        .child{\n            <!-- 样式内容省略 -->\n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode3\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;display: flex;align-items:center;}.child{background-color:#aaa;width:100%;}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode3')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n### 固定高度的垂直居中布局\n这个用以上的方法也可以，不过我比较喜欢用负margin实现\n\n    <style>\n        .parent{\n            <!-- 样式内容省略 -->\n            position:relative;\n        }\n        .child{\n            <!-- 部分样式内容省略 -->\n            height:200px;\n            position: absolute;\n            top: 50%;\n            margin-top:-100px;\n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode4\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;position:relative;}.child{background-color:#aaa;width:100%;height:200px;position: absolute;top: 50%; margin-top:-100px;}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode4')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n总结了几种方法，各有利弊，还是那句话：具体情况具体分析~ \n\nps:增加了运行代码的功能 更好的代码功能还在研究当中。","source":"_posts/各种居中布局的css实现方法.md","raw":"title: 垂直居中布局的几种css实现方法\ntags: css学习心得\n---\n\n在开发中经常会需要实现一些居中布局问题，今天来总结一下垂直、水平居中布局的css实现方法。\n<!-- more -->\n### 任意高度的垂直居中布局\n\n#### 1.父元素tabel-cell +vertical-align\n此方法的优点：兼容性好，兼容ie8+。\n\n    <style type=\"text/css\">\n        .parent{\n            <!-- 样式内容省略 -->\n            display: tabel-cell;\n            vertical-align:middle;\n        }\n        .child{\n            <!-- 样式内容省略 -->\n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode1\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;display: table-cell;vertical-align:middle;}.child{background-color:#aaa;width:100%;}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode1')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n#### 2. absolute + transform\n优点：不会干扰其他元素  \n缺点：兼容性不好\n\n    <style>\n        .parent{\n            <!-- 样式内容省略 -->\n            position:relative;\n        }\n        .child{\n            <!-- 样式内容省略 -->\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            \n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode2\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;position:relative;}.child{background-color:#aaa;width:100%;line-height:100px;position: absolute;top: 50%;transform: translateY(-50%);}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode2')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n#### 3.flex+align-items\n优点：和第一种方法一样只需要对父元素设置 \n缺点：兼容性不好\n\n    <style type=\"text/css\">\n        .parent{\n            <!-- 样式内容省略 -->\n            display: flex;\n            align-items:center;\n        }\n        .child{\n            <!-- 样式内容省略 -->\n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode3\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;display: flex;align-items:center;}.child{background-color:#aaa;width:100%;}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode3')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n### 固定高度的垂直居中布局\n这个用以上的方法也可以，不过我比较喜欢用负margin实现\n\n    <style>\n        .parent{\n            <!-- 样式内容省略 -->\n            position:relative;\n        }\n        .child{\n            <!-- 部分样式内容省略 -->\n            height:200px;\n            position: absolute;\n            top: 50%;\n            margin-top:-100px;\n        }\n    </style>\n    <div class=\"parent\">\n        <div class=\"child\">DEMO</div>\n    </div>\n<textarea id=\"runCode4\" name=\"textarea\" rows=\"10\" cols=\"60\" class=\"runCode\"><style type=\"text/css\">.parent{height: 600px;width: 200px;background-color: #999;position:relative;}.child{background-color:#aaa;width:100%;height:200px;position: absolute;top: 50%; margin-top:-100px;}</style><div class=\"parent\"><div class=\"child\">DEMO</div></div></textarea>\n<input style=\"cursor: hand\" onclick=\"runEx('runCode4')\" type=\"button\" value=\"运行代码\" class=\"runCode-btn\"/><br/>\n\n总结了几种方法，各有利弊，还是那句话：具体情况具体分析~ \n\nps:增加了运行代码的功能 更好的代码功能还在研究当中。","slug":"各种居中布局的css实现方法","published":1,"date":"2015-11-11T14:17:26.636Z","updated":"2015-11-11T14:17:26.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fiz000uu4rk5r0fxxmu"},{"title":"前端知识收集","_content":"\n整理了一些自己比较感兴趣的前端知识比较好的博文或者网址\n<!--more-->\n1. [HTTP 协议中 URI 和 URL 有什么区别？](http://www.zhihu.com/question/21950864)\n2. [从输入 URL 到页面加载完成的过程中都发生了什么事情？](http://fex.baidu.com/blog/2014/05/what-happen/)\n3. [详解js跨域问题](http://segmentfault.com/a/1190000000718840)\n4. [浅析闭包和内存泄露的问题](http://www.cnblogs.com/yakun/p/3932026.html)\n5. [HTTP缓存相关头](http://www.cnblogs.com/yjf512/p/3244882.html)\n6. [从setTimeout谈JavaScript运行机制](http://web.jobbole.com/82631/)\n7. [JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book/#introduction)\n8. [张宁：web前端？](http://dudu.zhihu.com/story/7117186?from=timeline&isappinstalled=0) ","source":"_posts/前端知识收集.md","raw":"title: 前端知识收集\ntag: web前端知识\n---\n\n整理了一些自己比较感兴趣的前端知识比较好的博文或者网址\n<!--more-->\n1. [HTTP 协议中 URI 和 URL 有什么区别？](http://www.zhihu.com/question/21950864)\n2. [从输入 URL 到页面加载完成的过程中都发生了什么事情？](http://fex.baidu.com/blog/2014/05/what-happen/)\n3. [详解js跨域问题](http://segmentfault.com/a/1190000000718840)\n4. [浅析闭包和内存泄露的问题](http://www.cnblogs.com/yakun/p/3932026.html)\n5. [HTTP缓存相关头](http://www.cnblogs.com/yjf512/p/3244882.html)\n6. [从setTimeout谈JavaScript运行机制](http://web.jobbole.com/82631/)\n7. [JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book/#introduction)\n8. [张宁：web前端？](http://dudu.zhihu.com/story/7117186?from=timeline&isappinstalled=0) ","slug":"前端知识收集","published":1,"date":"2015-11-11T14:17:26.635Z","updated":"2015-11-11T14:17:26.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fj3000xu4rk6tprlf4p"},{"title":"不是只有if和else","_content":"\n在我们写javascript函数的时候，经常会使用到条件判断，使用得最多的就是if else进行判断了。使用得多了渐渐会特别依赖这个最简单的方法，而导致整个函数里好多if else,甚至嵌套很多层。仔细研究，我们会发现用一大段if else的逻辑，其实用其他方法，一句话就能够完全实现同样的功能。\n\n#### 初级替代之一：三元表达式\n    \n    var max = a>b?a:b;\n\n三元表达式的规则就是，当\"?\"前的表达式为true时，返回\":\"前的值，否则返回\":\"后的值。\n所以上面那句表达式等价于\n    \n    if(a>b){\n        max=a;\n    }else{\n        max=b;\n    }\n\n#### 初级替代之二：switch\n\nswitch作为条件判断的方法之二，很明显可以替代一些简单但是重复的if else。实例\n\n    if(str==\"项链\"){//用if else\n        type=\"珠宝\";\n    }else if(str==\"苹果\"){\n        type=\"水果\";\n    }else if(str==\"仙人掌\"){\n        type=\"植物\";\n    }else{\n        type=\"人类\";\n    }\n\n    switch(str){// switch\n        case \"项链\": type=\"珠宝\";\n        break;\n        case \"苹果\": type=\"水果\";\n        break;\n        case \"仙人掌\": type=\"植物\";\n        break;\n        default:\n        type==\"人类\";\n    }\n\n但是看了上面的代码，肯定很多人会说，switch根本没有好到哪里去嘛，只是看上去稍微清晰了一点点。确实，所以我们有更简单的方法。\n\n#### 高级替代：数组对象；\n    \n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = typeMap[str];\n\n上面两句话就完成了之前一大段的逻辑，不过还没有完全完成，因为有个默认值“人类”没有写进去。这个该怎么加进去呢？\n\n#### 还有“&&”和“||”\n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = typeMap[str]||\"人类\";\n\n就这么两句话就完全实现了之前一大段逻辑判断的功能。不相信？可以试一试哦。\n\n    var type = typeMap[\"项链\"]||\"人类\";\n    console.log(type)// 珠宝\n\n    var type2 = typeMap[\"不认识\"]||\"人类\";\n    console.log(type2)// 人类\n\n\n要了解这之中的原因，首先要了解“||”的机制。\n一般我们用“||”是用来进行布尔判断，前后都是布尔值，但是当其中一个不是布尔值时，它遵循以下原则:\n>- 如果第一个操作数是对象，则返回第一个操作数。\n- 如果第一个操作数的求值结果为false，则返回第二个操作数。\n- 如果两个操作数都是对象，则返回第一个操作数。\n- 如果两个操作数都是null，则返回null。\n- 如果两个操作数都是NaN，则返回NaN。\n- 如果两个操作数都是undefined，则返回undefined。\n\n而且这是短路操作符，也就是说，如果第一个操作数的结果为true，则不会对第二个操作数求值了。\n所以很多时候，我们也用“||” 来给变量定义默认值。如：`var a= str|| default`\n\n&&的用法和||正好相反，它的机制是：\n>- 如果第一个操作数是对象，则返回第二个操作数。\n- 如果第二个操作数是对象，且只有第一个操作数的求值结果为true，则返回第二个操作数。\n- 如果有一个操作数都是对象，则返回第一个操作数。\n- 如果有一个操作数都是null，则返回null。\n- 如果有一个操作数都是NaN，则返回NaN。\n- 如果有一个操作数都是undefined，则返回undefined。\n\n所以我们可以这么用\n\n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = (year>1) && typeMap[str];\n\n上面这段话等同于\n\n    if(year>1){\n        if(str==\"项链\"){\n            type=\"珠宝\";\n        }else if(str==\"苹果\"){\n            type=\"水果\";\n        }else if(str==\"仙人掌\"){\n            type=\"植物\";\n    }\n\n然后我们还可以这样来\n\n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = ((year>1) && typeMap[str]) || \"人类\";\n\n这段话等同于\n\n    if(year>1){\n        if(str==\"项链\"){\n            type=\"珠宝\";\n        }else if(str==\"苹果\"){\n            type=\"水果\";\n        }else if(str==\"仙人掌\"){\n            type=\"植物\";\n        }else{\n            type=\"人类\";\n        }\n    }else{\n        type=\"人类\";\n    }\n\n卧槽，简直简便了好多对吧，不过为了维护性，还是不建议同时使用多个\"&&\" \"||\"，因为多了阅读起来就和阅读正则一样困难了。\n\n\n讲了以上几个方法，至于到底要怎么做，还是要具体情况具体分析啦。","source":"_posts/不是只有“if else”.md","raw":"title: 不是只有if和else\ntags: Javascript学习笔记\n---\n\n在我们写javascript函数的时候，经常会使用到条件判断，使用得最多的就是if else进行判断了。使用得多了渐渐会特别依赖这个最简单的方法，而导致整个函数里好多if else,甚至嵌套很多层。仔细研究，我们会发现用一大段if else的逻辑，其实用其他方法，一句话就能够完全实现同样的功能。\n\n#### 初级替代之一：三元表达式\n    \n    var max = a>b?a:b;\n\n三元表达式的规则就是，当\"?\"前的表达式为true时，返回\":\"前的值，否则返回\":\"后的值。\n所以上面那句表达式等价于\n    \n    if(a>b){\n        max=a;\n    }else{\n        max=b;\n    }\n\n#### 初级替代之二：switch\n\nswitch作为条件判断的方法之二，很明显可以替代一些简单但是重复的if else。实例\n\n    if(str==\"项链\"){//用if else\n        type=\"珠宝\";\n    }else if(str==\"苹果\"){\n        type=\"水果\";\n    }else if(str==\"仙人掌\"){\n        type=\"植物\";\n    }else{\n        type=\"人类\";\n    }\n\n    switch(str){// switch\n        case \"项链\": type=\"珠宝\";\n        break;\n        case \"苹果\": type=\"水果\";\n        break;\n        case \"仙人掌\": type=\"植物\";\n        break;\n        default:\n        type==\"人类\";\n    }\n\n但是看了上面的代码，肯定很多人会说，switch根本没有好到哪里去嘛，只是看上去稍微清晰了一点点。确实，所以我们有更简单的方法。\n\n#### 高级替代：数组对象；\n    \n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = typeMap[str];\n\n上面两句话就完成了之前一大段的逻辑，不过还没有完全完成，因为有个默认值“人类”没有写进去。这个该怎么加进去呢？\n\n#### 还有“&&”和“||”\n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = typeMap[str]||\"人类\";\n\n就这么两句话就完全实现了之前一大段逻辑判断的功能。不相信？可以试一试哦。\n\n    var type = typeMap[\"项链\"]||\"人类\";\n    console.log(type)// 珠宝\n\n    var type2 = typeMap[\"不认识\"]||\"人类\";\n    console.log(type2)// 人类\n\n\n要了解这之中的原因，首先要了解“||”的机制。\n一般我们用“||”是用来进行布尔判断，前后都是布尔值，但是当其中一个不是布尔值时，它遵循以下原则:\n>- 如果第一个操作数是对象，则返回第一个操作数。\n- 如果第一个操作数的求值结果为false，则返回第二个操作数。\n- 如果两个操作数都是对象，则返回第一个操作数。\n- 如果两个操作数都是null，则返回null。\n- 如果两个操作数都是NaN，则返回NaN。\n- 如果两个操作数都是undefined，则返回undefined。\n\n而且这是短路操作符，也就是说，如果第一个操作数的结果为true，则不会对第二个操作数求值了。\n所以很多时候，我们也用“||” 来给变量定义默认值。如：`var a= str|| default`\n\n&&的用法和||正好相反，它的机制是：\n>- 如果第一个操作数是对象，则返回第二个操作数。\n- 如果第二个操作数是对象，且只有第一个操作数的求值结果为true，则返回第二个操作数。\n- 如果有一个操作数都是对象，则返回第一个操作数。\n- 如果有一个操作数都是null，则返回null。\n- 如果有一个操作数都是NaN，则返回NaN。\n- 如果有一个操作数都是undefined，则返回undefined。\n\n所以我们可以这么用\n\n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = (year>1) && typeMap[str];\n\n上面这段话等同于\n\n    if(year>1){\n        if(str==\"项链\"){\n            type=\"珠宝\";\n        }else if(str==\"苹果\"){\n            type=\"水果\";\n        }else if(str==\"仙人掌\"){\n            type=\"植物\";\n    }\n\n然后我们还可以这样来\n\n    var typeMap = {\"项链\":\"珠宝\",\"苹果\":\"水果\",\"仙人掌\":\"植物\"};\n    var type = ((year>1) && typeMap[str]) || \"人类\";\n\n这段话等同于\n\n    if(year>1){\n        if(str==\"项链\"){\n            type=\"珠宝\";\n        }else if(str==\"苹果\"){\n            type=\"水果\";\n        }else if(str==\"仙人掌\"){\n            type=\"植物\";\n        }else{\n            type=\"人类\";\n        }\n    }else{\n        type=\"人类\";\n    }\n\n卧槽，简直简便了好多对吧，不过为了维护性，还是不建议同时使用多个\"&&\" \"||\"，因为多了阅读起来就和阅读正则一样困难了。\n\n\n讲了以上几个方法，至于到底要怎么做，还是要具体情况具体分析啦。","slug":"不是只有“if else”","published":1,"date":"2015-11-11T14:17:26.635Z","updated":"2015-11-11T14:17:26.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fj7000zu4rkjysrsggt"},{"title":"JavaScript实践","_content":"---\n### 命名\n\n代码是给人(别人或者1个星期后的 自己)阅读和修改的 \n\n給变量和函数一个简单易懂的名字 \n\n可维护性++\n\n** 以功能命名,而不是表现  isOverSeven() × VS isLegalAge() √ **\n\n    // 不好的命名\n    aaaa  \n    x1  \n    f  \n    hengxian  \n    createNewUserIfTheInputIsValida\n    te\n   避免全局变量\n\n> 我们无法拥有代码的控制权\n\n* 不易维护 \n* 牵一发而动全身 \n* 易被覆盖,修改,而你还不知道\n\n\n     // Bad\n    var currentColor;\n    var colorMap = {\n        red: '红色',\n        green: '绿色',\n        yellow: '黄色'\n    };\n    \n    function init() {\n        currentColor = 'red';\n    }\n        \n\n    // Common\n    (function () {\n        var currentColor;\n        \n        var colorMap = {\n            red: '红色',\n            green: '绿色',\n            yellow: '黄色'\n        };\n        \n        function init () {\n            currentColor = 'red';\n        }\n    })();\n    \n    // Good\n    var colorManager = function () {  \n    var currentColor;  \n    var colorMap  =  {           \n        red: '红色',           \n        green: '绿色',           \n        yellow: '黄色' \n    };  \n\n        return  { \n            init: function () {                   \n                currentColor  =  'red'          \n            } \n        } \n    }();\n    \n---\n### 正确的注释\n\n注释也是代码的一部分 \n\n错误的注释,相比没有注释,更可怕 \n\n介绍背景、介绍使用方式、介绍注意事项,不要重复代码的意思\n\n    //  已登陆的用户,有  name  和  age  两个属性  \n    var loginedUser = {           \n        name:  '',           \n        age:  10  \n    };\n    /*  \n        *  统一登录方法  \n        *  在需要登录的地方调用       \n        *  如果已经登陆,会立即执行回调       \n        *  否则,会显示登录窗口,登录完成后执行回 调  \n        *  todo:登录窗口的  UI  优化  \n    */  \n    function login(cb) {  \n    }\n\n---\n### 简短标记\n\n简短标记让代码更简单易读\n\n    // Bad\n    var user = new Object;\n    user.name = 'bajiefe';\n    user.age = 20;\n    \n    // Good\n    var user = {\n        name: 'bajiefe',\n        age: 20\n    };\n    \n    // Bad\n    var userList = new Array;\n    userList[0] = 'bajiefe';\n    userList[1] = 'bajierd';\n    \n    // Good\n    var userList = ['bajiefe', 'bajierd'];\n    \n    \n    // Bad\n    var age;\n    if(val) {\n        age = val;\n    } else {\n        age = 10;\n    }\n    \n    // Good\n    var age = val || 10;\n    \n    \n    // Bad\n    var direction;\n    \n    if(val) {\n        direction = 1;\n    } else {\n        direction = -1;\n    }\n    \n    // Good\n    var direction = val ? 1 : -1;\n---\n### 减少DOM 操作\n\n通过 className 来控制 DOM 样式\n\n    // Bad\n    userInput.style.cssText = 'color: red; border: 1px  solid  red;'  \n    \n    // Good\n    userInput.className  =  ‘error;’\n\ndom 节点修改好后再插入 dom  tree\n    \n    // Bad\n    function addAnchor(parentElement, anchorText, anchorClass) {\n        var element = document.createElement('a');\n        parentElement.appendChild(element);\n        element.innerHTML = anchorText;\n        element.className = anchorClass;\n    }\n    \n    // Good\n    var element = document.createElement('a');\n    element.innerHTML = anchorText;\n    element.className = anchorClass;\n    parentElement.appendChild(element);\n\n通过文档片段创建 DOM\n    \n    document.createDocumentFragment();\n    \n    function addAnchors(element) {\n        var anchor;\n        var fragment = document.createDocumentFragment();\n    \n        for(var i = 0; i < 10; i++) {\n            anchor = document.createElement('a');\n            anchor.innerHTML = 'test';\n            fragment.appendChild(anchor);\n        }\n    \n        element.appendChild(fragment);\n    }\n\n通过事件代理绑定事件\n\n---\n### 自动分号插入\n\n当不清楚写不写分号时,写上\n\n    var tester = function() {\n    \n    }\n    \n    (function() {\n        console.log(tester);\n    })()\n    \n    var a = 123\n\n---\n### Debug\nGoogle 开发者工具","source":"_posts/JavaScript实践.md","raw":"title: JavaScript实践\ntag: Javascript学习笔记\n---\n---\n### 命名\n\n代码是给人(别人或者1个星期后的 自己)阅读和修改的 \n\n給变量和函数一个简单易懂的名字 \n\n可维护性++\n\n** 以功能命名,而不是表现  isOverSeven() × VS isLegalAge() √ **\n\n    // 不好的命名\n    aaaa  \n    x1  \n    f  \n    hengxian  \n    createNewUserIfTheInputIsValida\n    te\n   避免全局变量\n\n> 我们无法拥有代码的控制权\n\n* 不易维护 \n* 牵一发而动全身 \n* 易被覆盖,修改,而你还不知道\n\n\n     // Bad\n    var currentColor;\n    var colorMap = {\n        red: '红色',\n        green: '绿色',\n        yellow: '黄色'\n    };\n    \n    function init() {\n        currentColor = 'red';\n    }\n        \n\n    // Common\n    (function () {\n        var currentColor;\n        \n        var colorMap = {\n            red: '红色',\n            green: '绿色',\n            yellow: '黄色'\n        };\n        \n        function init () {\n            currentColor = 'red';\n        }\n    })();\n    \n    // Good\n    var colorManager = function () {  \n    var currentColor;  \n    var colorMap  =  {           \n        red: '红色',           \n        green: '绿色',           \n        yellow: '黄色' \n    };  \n\n        return  { \n            init: function () {                   \n                currentColor  =  'red'          \n            } \n        } \n    }();\n    \n---\n### 正确的注释\n\n注释也是代码的一部分 \n\n错误的注释,相比没有注释,更可怕 \n\n介绍背景、介绍使用方式、介绍注意事项,不要重复代码的意思\n\n    //  已登陆的用户,有  name  和  age  两个属性  \n    var loginedUser = {           \n        name:  '',           \n        age:  10  \n    };\n    /*  \n        *  统一登录方法  \n        *  在需要登录的地方调用       \n        *  如果已经登陆,会立即执行回调       \n        *  否则,会显示登录窗口,登录完成后执行回 调  \n        *  todo:登录窗口的  UI  优化  \n    */  \n    function login(cb) {  \n    }\n\n---\n### 简短标记\n\n简短标记让代码更简单易读\n\n    // Bad\n    var user = new Object;\n    user.name = 'bajiefe';\n    user.age = 20;\n    \n    // Good\n    var user = {\n        name: 'bajiefe',\n        age: 20\n    };\n    \n    // Bad\n    var userList = new Array;\n    userList[0] = 'bajiefe';\n    userList[1] = 'bajierd';\n    \n    // Good\n    var userList = ['bajiefe', 'bajierd'];\n    \n    \n    // Bad\n    var age;\n    if(val) {\n        age = val;\n    } else {\n        age = 10;\n    }\n    \n    // Good\n    var age = val || 10;\n    \n    \n    // Bad\n    var direction;\n    \n    if(val) {\n        direction = 1;\n    } else {\n        direction = -1;\n    }\n    \n    // Good\n    var direction = val ? 1 : -1;\n---\n### 减少DOM 操作\n\n通过 className 来控制 DOM 样式\n\n    // Bad\n    userInput.style.cssText = 'color: red; border: 1px  solid  red;'  \n    \n    // Good\n    userInput.className  =  ‘error;’\n\ndom 节点修改好后再插入 dom  tree\n    \n    // Bad\n    function addAnchor(parentElement, anchorText, anchorClass) {\n        var element = document.createElement('a');\n        parentElement.appendChild(element);\n        element.innerHTML = anchorText;\n        element.className = anchorClass;\n    }\n    \n    // Good\n    var element = document.createElement('a');\n    element.innerHTML = anchorText;\n    element.className = anchorClass;\n    parentElement.appendChild(element);\n\n通过文档片段创建 DOM\n    \n    document.createDocumentFragment();\n    \n    function addAnchors(element) {\n        var anchor;\n        var fragment = document.createDocumentFragment();\n    \n        for(var i = 0; i < 10; i++) {\n            anchor = document.createElement('a');\n            anchor.innerHTML = 'test';\n            fragment.appendChild(anchor);\n        }\n    \n        element.appendChild(fragment);\n    }\n\n通过事件代理绑定事件\n\n---\n### 自动分号插入\n\n当不清楚写不写分号时,写上\n\n    var tester = function() {\n    \n    }\n    \n    (function() {\n        console.log(tester);\n    })()\n    \n    var a = 123\n\n---\n### Debug\nGoogle 开发者工具","slug":"JavaScript实践","published":1,"date":"2015-11-11T14:17:26.634Z","updated":"2015-11-11T14:17:26.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguw5fja0011u4rkgj59abzi"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciguw5fhi0001u4rkxob98irr","tag_id":"ciguw5fhn0002u4rkdjuuddm4","_id":"ciguw5fhp0003u4rkkx1ppru9"},{"post_id":"ciguw5fht0004u4rk0pb7tcny","tag_id":"ciguw5fhv0005u4rkeeutq8gz","_id":"ciguw5fhv0006u4rkgk5ymknp"},{"post_id":"ciguw5fhy0007u4rk45vsdpja","tag_id":"ciguw5fi00008u4rkn0bnx6zv","_id":"ciguw5fi00009u4rky1z0nv90"},{"post_id":"ciguw5fi6000au4rk5rk7fvss","tag_id":"ciguw5fi8000bu4rkygynvl3u","_id":"ciguw5fi9000cu4rkx0u7aqfp"},{"post_id":"ciguw5fia000du4rkr3gzml02","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fic000fu4rkwlsm1t0d"},{"post_id":"ciguw5fid000gu4rkqvirgydb","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fif000hu4rk3tuij7i8"},{"post_id":"ciguw5fih000iu4rkxx07kikv","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fii000ju4rkrxlxmpag"},{"post_id":"ciguw5fil000ku4rkg5alx9po","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fim000lu4rk3atgfj2s"},{"post_id":"ciguw5fio000mu4rknkhxc43n","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fip000nu4rkt0rmmx94"},{"post_id":"ciguw5fir000ou4rktmkczfrh","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fis000pu4rkpp4nxlbg"},{"post_id":"ciguw5fit000qu4rku2hksrjt","tag_id":"ciguw5fib000eu4rkxqosnfzh","_id":"ciguw5fiv000ru4rkudq84t57"},{"post_id":"ciguw5fiw000su4rkc68aruva","tag_id":"ciguw5fi00008u4rkn0bnx6zv","_id":"ciguw5fix000tu4rk36g3rp4y"},{"post_id":"ciguw5fiz000uu4rk5r0fxxmu","tag_id":"ciguw5fj1000vu4rkdyvfh31b","_id":"ciguw5fj1000wu4rkt48pqxre"},{"post_id":"ciguw5fj3000xu4rk6tprlf4p","tag_id":"ciguw5fi8000bu4rkygynvl3u","_id":"ciguw5fj5000yu4rkid6cd1x0"},{"post_id":"ciguw5fj7000zu4rkjysrsggt","tag_id":"ciguw5fi00008u4rkn0bnx6zv","_id":"ciguw5fj90010u4rkmh4baqn0"},{"post_id":"ciguw5fja0011u4rkgj59abzi","tag_id":"ciguw5fi00008u4rkn0bnx6zv","_id":"ciguw5fjb0012u4rksywcevy3"}],"Tag":[{"name":"矫情不是病","_id":"ciguw5fhn0002u4rkdjuuddm4"},{"name":"二次元","_id":"ciguw5fhv0005u4rkeeutq8gz"},{"name":"Javascript学习笔记","_id":"ciguw5fi00008u4rkn0bnx6zv"},{"name":"web前端知识","_id":"ciguw5fi8000bu4rkygynvl3u"},{"name":"学习日报","_id":"ciguw5fib000eu4rkxqosnfzh"},{"name":"css学习心得","_id":"ciguw5fj1000vu4rkdyvfh31b"}]}}